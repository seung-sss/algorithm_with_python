# 선택 정렬에 비해 실행 시간 측면에서 더 효율적인 알고리즘
# 특정 데이터를 적절한 위치에 삽입하는 방법으로, 특정 데이터의 앞까지는 이미 정렬되어 있다고 가정
# 특정 데이터에서 왼쪽으로 이동하며 자신보다 작은 데이터를 만났을 때 그 위치에서 멈춤
# 시간 복잡도는 O(N^2)임
# '데이터가 거의 정렬되어 있을 때' 매우 빠르게 동작 (최선의 경우 O(N) 시간 복잡도 가짐)
# 정렬이 거의 되어있는 상황에서는 퀵 정렬보다 더 빠를 수 있음
# 따라서 거의 정렬이 되어있는 경우, 삽입 정렬 사용하면 좋을 수 있음

array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

for i in range(1, len(array)):
    for j in range(i, 0, -1):
        if array[j] < array[j-1]: # 한 칸씩 왼쪽으로 이동
            array[j], array[j-1] = array[j-1], array[j]
        else: # 자기보다 작은 데이터 만나면 그 위치에서 멈춤
            break

print(array)