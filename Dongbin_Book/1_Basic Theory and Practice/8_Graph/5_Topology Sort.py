# 위상정렬은 정렬 알고리즘 일종으로, 순서가 정해져 있는 일련의 작업 차례대로 수행해야 할 때 사용하는 알고리즘
# 방향 그래프의 모든 노드를 '방향성에 거스르지 않도록 순서대로 나열하는 것'
# ex> 선수과목을 고려한 학습 순서 설정
# 즉, 그래프 상에서 선후 관계가 있다면, 위상 정렬 수행하여 모든 선후 관계 지키는 전체 순서 계산 가능

# 진입차수 : 특정한 노드로 들어오는 간선의 개수 의미

# 방법:
# 1. 진입차수가 0인 노드를 큐에 넣는다
# 2. 큐가 빌 때까지 다음의 과정을 반복한다
# 2-1. 큐에서 원소를 꺼내 해단 노드에서 출발하는 간선을 그래프에서 제거한다
# 2-2. 새롭게 진입차수가 0이 된 노드를 큐에 넣는다

# 만일 모든 원소 방문하기 전에 큐가 빈다면 사이클이 존재한다고 판단할 수 있음
# 사이클이 존재하는 경우 사이클에 포함된 원소는 큐에 들어가지 못하기 때문임 (진입차수 0이 될 수 없음)
# 다만, 보통 위상 정렬 문제에서는 사이클 발생하지 않는다고 명시하는 경우가 많음
# 만일 한 단계에서 큐에 새로 들어가는 원소 2개 이상인 경우, 여러 답이 존재할 수 있음
# 모든 노드 확인하면서, 해당 노드에서 출발하는 간선 차례대로 제거하므로 시간복잡도 O(V+E)임

import sys
from collections import deque

# 노드의 개수와 간선의 개수 입력받기
v, e = map(int, sys.stdin.readline().split())

# 모든 노드에 대한 진입차수 0으로 초기화
indegree = [0] * (v + 1)

# 각 노드에 연결된 간선 정보를 담기 위한 연결 리스트(그래프) 초기화
graph = [[] for _ in range(v + 1)]

# 방향 그래프의 모든 간선 정보를 입력받기
for _ in range(e):
    a, b = map(int, sys.stdin.readline().split())
    graph[a].append(b) # 정점 A에서 B로 이동 가능
    # 진입차수 1 증가
    indegree[b] += 1

# 위상 정렬 함수
def topology_sort():
    result = [] # 알고리즘 수행 결과를 담을 리스트
    q = deque() # 큐 기능 위한 deque 라이브러리 이용

    # 처음 시작할 때는 진입차수가 0인 노드를 큐에 삽입
    for i in range(1, v + 1):
        if indegree[i] == 0:
            q.append(i)

    # 큐가 빌 때까지 반복
    while q:
        # 큐에서 원소 꺼내기
        now = q.popleft()
        result.append(now)
        # 해당 원소와 연결된 노드들의 진입차수에서 1 빼기
        for next in graph[now]:
            indegree[next] -= 1
            # 새롭게 진입차수 0이 되는 노드 큐에 삽입
            if indegree[next] == 0:
                q.append(next)

    # 위상 정렬 수행 결과 출력
    print(*result)

print(topology_sort())